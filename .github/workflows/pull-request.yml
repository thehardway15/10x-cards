name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      update_snapshots:
        description: 'Update Playwright visual snapshots'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: "20"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unit-tests
          name: unit-tests-coverage
          fail_ci_if_error: false

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 30

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: integration
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests (and update snapshots if triggered)
        run: |
          if [ "${{ github.event.inputs.update_snapshots }}" == "true" ]; then
            npm run test:e2e -- --update-snapshots
          else
            npm run test:e2e
          fi
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30
          
  commit-snapshots:
    name: Commit Snapshots
    runs-on: ubuntu-latest
    needs: e2e-tests
    # Uruchom tylko wtedy, gdy workflow został wywołany ręcznie z opcją aktualizacji
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.update_snapshots == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Potrzebujemy tokenu do pushowania zmian
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push updated snapshots
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: Update Playwright snapshots"
          branch: ${{ github.head_ref || github.ref_name }}
          file_pattern: 'e2e-tests/**/*.png' # Wzorzec pasujący do Twoich snapshotów

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests]
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate status report
        id: status
        run: |
          # Check if all required jobs succeeded
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "status=✅ All checks passed" >> $GITHUB_OUTPUT
            echo "message=🎉 All checks have passed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=❌ Some checks failed" >> $GITHUB_OUTPUT
            echo "message=⚠️ Some checks have failed. Please review the logs above." >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Remove previous status comments
            for (const comment of comments) {
              if (comment.user.type === 'Bot' && comment.body.includes('## 🔍 PR Status Report')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }

            // Create new status comment
            const status = '${{ steps.status.outputs.status }}';
            const message = '${{ steps.status.outputs.message }}';

            const commentBody = `## 🔍 PR Status Report

            ${status}

            ${message}

            ### Job Results:
            - **Lint**: ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **Unit Tests**: ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **E2E Tests**: ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}

            ---
            *This comment was automatically generated by GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
            });